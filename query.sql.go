// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package main

import (
	"context"
	"database/sql"
)

const createT1 = `-- name: CreateT1 :execresult
INSERT INTO t1 (id, name) VALUES (?, ?)
`

type CreateT1Params struct {
	ID   int32
	Name string
}

func (q *Queries) CreateT1(ctx context.Context, arg CreateT1Params) (sql.Result, error) {
	return q.db.ExecContext(ctx, createT1, arg.ID, arg.Name)
}

const deleteT1 = `-- name: DeleteT1 :execresult
DELETE FROM t1 WHERE id = ?
`

func (q *Queries) DeleteT1(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteT1, id)
}

const getT1 = `-- name: GetT1 :many
SELECT id, name FROM t1
`

func (q *Queries) GetT1(ctx context.Context) ([]T1, error) {
	rows, err := q.db.QueryContext(ctx, getT1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []T1
	for rows.Next() {
		var i T1
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateT1 = `-- name: UpdateT1 :execresult
UPDATE t1 SET name = ? WHERE id = ?
`

type UpdateT1Params struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateT1(ctx context.Context, arg UpdateT1Params) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateT1, arg.Name, arg.ID)
}
